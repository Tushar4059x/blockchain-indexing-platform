generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dbConnections DbConnection[]
  indexingTasks IndexingTask[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DbConnection {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  host        String
  port        Int
  database    String
  username    String
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  indexingTasks IndexingTask[]
}

model IndexingTask {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  dbConnectionId  String
  dbConnection    DbConnection @relation(fields: [dbConnectionId], references: [id])
  name            String
  type            IndexingType
  status          TaskStatus @default(PENDING)
  config          Json
  lastSyncedAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum IndexingType {
  NFT_BIDS
  NFT_PRICES
  TOKEN_BORROW
  TOKEN_PRICES
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
} 